#!/bin/bash

GREEN=$'\033[0;32m'
PINK=$'\033[0;35m'
GRAY=$'\033[1;30m'
RESET=$'\033[0m'

# 사용법 출력 함수
usage() {
    echo "Usage: $0 [-a] [-d] [-n]"
    echo "  -a : Show all branches (default)"
    echo "  -d : Show only branches with a description"
    echo "  -n : Show only branches without a description"
    exit 1
}

# 현재 디렉터리가 Git 리포지토리인지 확인
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: The current directory is not a Git repository."
    exit 1
fi

# 옵션 초기화
show_all=false
show_desc_only=false
show_no_desc_only=false

while getopts "adn" opt; do
    case "$opt" in
        a) show_all=true ;;
        d) show_desc_only=true ;;
        n) show_no_desc_only=true ;;
        *) usage ;;
    esac
done

# 옵션이 하나도 지정되지 않은 경우 기본값: 모든 브랜치 출력
if ! $show_all && ! $show_desc_only && ! $show_no_desc_only; then
    show_all=true
fi

# -d와 -n를 동시에 지정하면 모든 브랜치를 출력
if $show_desc_only && $show_no_desc_only; then
    show_all=true
    show_desc_only=false
    show_no_desc_only=false
fi

# 현재 브랜치 가져오기
current_branch=$(git symbolic-ref --short HEAD)

# 이전 브랜치를 가져올 때 에러 출력을 무시하고, 결과가 "@{-1}" 또는 빈 값이면 이전 브랜치가 없다고 처리
previous_branch=$(git rev-parse --abbrev-ref '@{-1}' 2>/dev/null)
if [ "$previous_branch" = "@{-1}" ] || [ -z "$previous_branch" ]; then
    previous_branch=""
fi

# 안전하게 브랜치 목록을 배열에 저장 (공백 포함 안전)
mapfile -t branches < <(git branch --format="%(refname:short)")

branches_with_desc=()
branches_without_desc=()

# 브랜치의 description을 안전하게 가져오는 함수
get_branch_description() {
    local branch="$1"
    local desc
    desc=$(git config "branch.${branch}.description")
    if [ -z "$desc" ]; then
        echo "(no description)"
    else
        echo "$desc"
    fi
}

# 각 브랜치에 대해 description을 확인하여 배열에 저장
for branch in "${branches[@]}"; do
    description=$(get_branch_description "$branch")
    entry="${branch}|${description}"
    if [ "$description" = "(no description)" ]; then
        branches_without_desc+=("$entry")
    else
        branches_with_desc+=("$entry")
    fi
done

# 배열 정렬 (branch 이름 기준)
IFS=$'\n'
sorted_with=($(sort <<<"${branches_with_desc[*]}"))
sorted_without=($(sort <<<"${branches_without_desc[*]}"))
unset IFS

# 브랜치 정보를 출력하는 함수
print_branch_info() {
    local prefix="$1"
    local branch="$2"
    local description="$3"
    local branch_color="$4"
    printf "%b%s - %s\n" "$prefix" "${branch_color}${branch}${RESET}" "$description"
}

# 옵션에 따라 브랜치 출력 (기본적으로 알파벳 순 정렬)
if $show_all || $show_no_desc_only; then
    for entry in "${sorted_without[@]}"; do
        branch_name=$(echo "$entry" | cut -d'|' -f1)
        branch_desc=$(echo "$entry" | cut -d'|' -f2-)
        print_branch_info "" "$branch_name" "$branch_desc" "$PINK"
    done
fi

if $show_all || $show_desc_only; then
    for entry in "${sorted_with[@]}"; do
        branch_name=$(echo "$entry" | cut -d'|' -f1)
        branch_desc=$(echo "$entry" | cut -d'|' -f2-)
        print_branch_info "" "$branch_name" "$branch_desc" "$PINK"
    done
fi

# 이전 브랜치와 현재 브랜치 표시 (이전 브랜치가 유효할 경우에만)
if [ -n "$previous_branch" ] && [ "$previous_branch" != "$current_branch" ]; then
    prev_description=$(get_branch_description "$previous_branch")
    printf "%b*prev %s - %s\n" "$GRAY" "${PINK}${previous_branch}${RESET}" "$prev_description"
fi

curr_description=$(get_branch_description "$current_branch")
printf "%b*curr %s - %s\n" "$GREEN" "${PINK}${current_branch}${RESET}" "$curr_description"
